/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> inOrder = new ArrayList<Integer>();
        if (root == null)
            return inOrder;
 
 
        Stack<TreeNode> s = new Stack<TreeNode>();
        TreeNode curr = root;
 
        // traverse the tree
        while (curr != null || !s.isEmpty())
        {
            // fill in all the left nodes
            while (curr !=  null)
            {
                s.push(curr);
                curr = curr.left;
            }
 
            curr = s.pop();
 
            inOrder.add(curr.val);
 
            // check for the right node
            curr = curr.right;
        }
        return inOrder;
    }
}